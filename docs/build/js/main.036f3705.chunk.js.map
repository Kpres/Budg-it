{"version":3,"sources":["components/radial.js","components/ManagementPage.js","components/HomePage.js","components/TransactionTracking.js","components/TransactionPage.js","App.js","registerServiceWorker.js","index.js"],"names":["charts","document","querySelectorAll","loop","t","value","requestAnimationFrame","Math","floor","forEach","chart","style","setProperty","setChartValue","ManagementPage","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateTransactionList","console","log","props","transactions","temp","state","transactionList","tempw","total_wallet_amount","i","length","push","Number","getAmount","setState","setThreshold","e","savingsColor","chosen_savings_threshold","target","addTransaction","clearHistory","clearPurchaseHistory","route","receiveTotal","receivePercentage","routeHome","makeSuggestions","suggestion","maxTransaction","maxTransactionIndex","abs","getTitle","countObj","toLowerCase","maxTalliedTotal","maxTalliedName","regularIncome","regularPurchase","spontaneousPurchase","getSpontaneous","swal","title","text","type","confirmButtonText","bind","assertThisInitialized","inherits","createClass","key","localStorage","getItem","setItem","react_default","a","createElement","Redirect","to","className","onClick","class","--percent","--amount","for","onChange","defaultValue","max","id","align","color","map","trans","amount","String","spontaneous","Component","HomePage","updateWalletSign","wallet","wallet_sign","routeToTransaction","redirect","routeToManagement","current_savings_percent","updateWallet","round","TransactionItem","_amount","_title","_spontaneous","_id","TransactionPage","signChange","positive","posState","negState","regularityChange","spontState","regState","setValue","setName","name","sendTransaction","receiveTransaction","routeManagement","route_Management","route_management","placeholder","aria-label","min","data-toggle","checked","App","total_from_managment","percentage_from_managment","transaction","JSON","parse","simplify","tempStorage","wrap","total","percentage","transaction1","stringify","_this2","BrowserRouter","Switch","Route","exact","path","render","HomePage_HomePage","ManagementPage_ManagementPage","resetPurchaseHistory","TransactionPage_TransactionPage","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","src_App_0","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.036f3705.chunk.js","sourcesContent":["//Functions to update the radial as the user slides the bar\r\n\r\nfunction loop(t) {\r\n    requestAnimationFrame(loop);\r\n    updateCharts(Math.floor(t / 16) % 100);\r\n  }\r\n  \r\n  function updateCharts(value) {\r\n    charts.forEach(chart => setChartValue(chart, value));\r\n  }\r\n  \r\n  function setChartValue(chart, value) {\r\n    chart.style.setProperty('--percent', value);\r\n  }\r\n  \r\n  let charts = document.querySelectorAll('.js');\r\n  \r\n  loop();\r\n\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport { Redirect } from \"react-router\";\r\nimport './Global.css'\r\nimport './radial.js';\r\nimport './radial.css'\r\nimport './ManagementPage.css';\r\nimport swal from 'sweetalert2'\r\n\r\nexport class ManagementPage extends Component{\r\n    constructor(){\r\n        super();\r\n        //state to hold member variables\r\n        this.state = ({\r\n            chosen_savings_threshold: 0,\r\n            total_wallet_amount: 15000,\r\n            savingsColor: \"white\",\r\n            routeHome: false,\r\n            transactionList: [],\r\n          \r\n            //example transaction item\r\n            }) //[new TransactionItem(-30, \"Food\", true, 0), new TransactionItem(400, \"Paycheck\", false, 1)];\r\n\r\n            //binding functions so that they can set the state properly\r\n            this.addTransaction = this.addTransaction.bind(this);\r\n            this.updateTransactionList = this.updateTransactionList.bind(this);\r\n    }\r\n\r\n    //function to run every time the component parent state changes\r\n    componentWillMount(){\r\n        this.updateTransactionList();\r\n        this.setState({chosen_savings_threshold: localStorage.getItem(\"hi\")})\r\n    }\r\n\r\n    //Updates the transaction list to be displayed when it recieves a new transaction\r\n    updateTransactionList = () => {\r\n        console.log(\"mngmt\")\r\n        console.log(this.props.transactions);\r\n        var temp = this.state.transactionList;\r\n        var tempw = this.state.total_wallet_amount;\r\n        for(var i = 0; i < this.props.transactions.length; ++i){\r\n            temp.push(this.props.transactions[i]);\r\n            tempw = tempw + Number(this.props.transactions[i].getAmount());\r\n        }\r\n\r\n        this.setState({total_wallet_amount: tempw});\r\n        this.setState({transactionList: temp});\r\n    }\r\n\r\n    //Sets the threshold to the users specification\r\n    setThreshold = (e) => {\r\n        this.setState({savingsColor: \"white\"});\r\n        this.setState({chosen_savings_threshold: e.target.value});\r\n    }\r\n\r\n    //adds a transaction\r\n    addTransaction = (t) => {\r\n        // takes in a transactionitem, and appends it to the transaction list\r\n        this.setState({transactionList: this.state.transactionList.push(t)});\r\n    }\r\n\r\n    //clears the purchase history in this current class and the parent class\r\n    clearHistory = () => {\r\n        this.props.clearPurchaseHistory();\r\n    }\r\n\r\n    //Adds ability to route home and it also passes the correct values to the parent class\r\n    route = () => {\r\n        this.props.receiveTotal(this.state.total_wallet_amount);\r\n        this.props.receivePercentage(this.state.chosen_savings_threshold);\r\n        this.setState({routeHome: true});\r\n    }\r\n\r\n\r\n    //Big Boy function that creates smart suggestions on your spending habbits\r\n    makeSuggestions = () => {\r\n        //sugestion is a string that gets modified as to hold the most important suggestion\r\n        var suggestion = \"So far so good!\"\r\n\r\n        //Should not save more than 75 percent or you will have no spending money\r\n        if (this.state.chosen_savings_threshold > 75) {\r\n            suggestion = \"You're saving \" + this.state.chosen_savings_threshold + \"% of your income. Consider lowering that.\"\r\n        }//have to make transactions for the suggestions to work\r\n        else if(this.state.transactionList.length === 0){\r\n            suggestion = \"Try making some transactions to help us make suggestions.\"\r\n        }\r\n        else {//Next suggestion that tests for abnormally large purchases\r\n            var maxTransaction = 0;\r\n            var maxTransactionIndex = 0;\r\n            var transactions = this.state.transactionList;\r\n\r\n            for (var i = 0; i < transactions.length; i++){\r\n                if (Math.abs(transactions[i].getAmount()) > maxTransaction){\r\n                    maxTransaction = Math.abs(transactions[i].getAmount());\r\n                    maxTransactionIndex = i;\r\n                }\r\n            }\r\n            if (maxTransaction >= 5000){\r\n                suggestion = \"You spent $\" + maxTransaction + \" on \" + transactions[maxTransactionIndex].getTitle() + \r\n                \". Consider making smaller purchases in the future.\";\r\n            }\r\n            else{ //Next suggestion that tests for spending too much on any one item\r\n                var countObj = {};\r\n                //get the total spent for each item\r\n                for(var i = 0; i < transactions.length; i++){\r\n                    if(transactions[i].getAmount() < 0){\r\n                        if(transactions[i].getTitle().toLowerCase() in countObj){\r\n                            countObj[transactions[i].getTitle().toLowerCase()] = countObj[transactions[i].getTitle().toLowerCase()] + Math.abs(transactions[i].getAmount());\r\n                        }else{\r\n                            countObj[transactions[i].getTitle().toLowerCase()] = Math.abs(transactions[i].getAmount());\r\n                        }\r\n                    }\r\n                }\r\n                //Find the item that you spent the most on\r\n                var maxTalliedTotal = 0;\r\n                var maxTalliedName = \"\";\r\n                for (var i = 0; i < transactions.length; i++){\r\n                    if (countObj[transactions[i].getTitle().toLowerCase()] > maxTalliedTotal){\r\n                        maxTalliedTotal = countObj[transactions[i].getTitle().toLowerCase()];\r\n                        maxTalliedName = transactions[i].getTitle().toLowerCase();\r\n                    }\r\n                }\r\n                //test that max and make sure you decrease that for the future\r\n                if(maxTalliedTotal >= 5000){\r\n                    suggestion = \"You spent \" + maxTalliedTotal + \" on multiple purchases of \"+ maxTalliedName + \". Consider buying \"+ \r\n                    \"that item in less quantities.\";\r\n                }\r\n                else{\r\n                    //Final suggestion to test for spontaneous and regular purhcases and deposits\r\n                    var regularIncome = 0;\r\n                    var regularPurchase = 0;\r\n                    var spontaneousPurchase = 0;\r\n                  \r\n                    //get totals for each of these values\r\n                    for(var i = 0; i < transactions.length; i++){\r\n                        if(!transactions[i].getSpontaneous()){\r\n                            if(transactions[i].getAmount() > 0)\r\n                                regularIncome += transactions[i].getAmount();\r\n                            else regularPurchase += transactions[i].getAmount();\r\n                        }\r\n                        else if (transactions[i].getAmount() < 0) spontaneousPurchase += transactions[i].getAmount();\r\n                    }\r\n                    //make sure we use the absolute value to remove any negatives\r\n                    regularIncome = Math.abs(regularIncome);\r\n                    regularPurchase = Math.abs(regularPurchase);\r\n                    spontaneousPurchase = Math.abs(spontaneousPurchase);\r\n\r\n                    //Test them against one another and make the proper suggestion\r\n                    if(regularIncome < regularPurchase) suggestion = \"You're spending more than you earn on a regular basis.\";\r\n                    else if (regularIncome < spontaneousPurchase) suggestion = \"You're impulse buying more than you regularly earn.\";\r\n                }\r\n            } \r\n        }\r\n        //Modal that shows the suggestion when the button is clicked\r\n        swal({\r\n            title: \"Suggestion\",\r\n            text : suggestion,\r\n            type: 'info',\r\n            confirmButtonText: \"Okay\"\r\n        })\r\n    }\r\n    //render function to render the components\r\n    render(){\r\n        //local storage to save items\r\n        localStorage.setItem(\"hi\", this.state.chosen_savings_threshold)\r\n        //appropriate routing\r\n        if (this.state.routeHome) {\r\n            return <Redirect push to=\"/\" />;\r\n        }\r\n        //return the html\r\n        return(\r\n        <div className = \"page\">\r\n            <div className = \"Header\">\r\n                <span className = \"Menu\" onClick = {this.route}>≡</span>\r\n                <span className = \"yourSavings\">Your Savings</span>\r\n            </div>\r\n\r\n            <div>\r\n                <div class=\"big\">\r\n                    <div class=\"pie pie--value pie--disc\" style={{\"--percent\":this.state.chosen_savings_threshold,\"--amount\":(this.state.chosen_savings_threshold/100 * this.state.total_wallet_amount)}}></div>\r\n                </div>\r\n            </div>\r\n            <form>\r\n                \r\n                {/* Shows the savings percentage and the radial bar */}\r\n                <div class=\"form-group\">\r\n                    <label for=\"formControlRange\">Enter Savings Percentage: {this.state.chosen_savings_threshold} %</label>\r\n                    <input onChange = {this.setThreshold} type=\"range\" defaultValue = {this.state.chosen_savings_threshold} max = \"100\" class=\"slider form-control-range\" id=\"formControlRange\"></input>   \r\n                </div>\r\n\r\n                {/* Shows the history table */}\r\n                <div class=\"TransactionTable\">\r\n                    <div className=\"TableHead\">\r\n                        <span align=\"left\" id=\"TableTitle\">History:</span>\r\n                        <span>\r\n                            <button id = \"historyButton\" className=\"btn btn-outline-secondary\" onClick = {this.clearHistory}>Clear</button>\r\n                        </span>\r\n                        <span>\r\n                            <button type=\"button\" id = \"historyButton\" className=\"btn btn-outline-secondary\" onClick = {this.makeSuggestions}>\r\n                                Suggestion\r\n                            </button>\r\n                        </span>\r\n                    </div>\r\n\r\n                    {/* Mapping trans to every item in the list and displaying it */}\r\n                    <div align=\"left\" style ={{color: \"black\"}}> {\r\n                        this.state.transactionList.length > 0 ? (\r\n                        this.state.transactionList.map((trans) => \r\n                            <li key = {trans.state.id} style={{color: trans.state.amount < 0 ? \"#cc2d21\" : \"#3bbf28\"}}>  \r\n                                {trans.state.title + \" | \" + \r\n                                (trans.state.amount < 0 ? \" - $\" : \" + $\") + \r\n                                String(Math.abs(trans.state.amount)) + \" | \" +\r\n                                (trans.state.spontaneous ? \"Spontaneous\" : \"Regular\")} \r\n                            </li>\r\n                            )\r\n                        ):(<div></div>)\r\n                        } \r\n                    </div>\r\n                </div> \r\n            </form>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport { Redirect } from \"react-router\";\r\nimport './Global.css'\r\nimport './HomePage.css';\r\n\r\nexport class HomePage extends Component{\r\n    constructor(){\r\n        super();\r\n        //State that holds current info (member variables)\r\n        this.state = ({\r\n            current_savings_percent: 0,\r\n            total_wallet_amount: 15000,\r\n            wallet: 15000,\r\n            wallet_sign: \"+\",\r\n            redirect: false,\r\n            routeToManagement: false,\r\n        });\r\n        //bind appropriate functions so that they can set the state\r\n        this.updateWallet = this.updateWallet.bind(this);\r\n    }\r\n\r\n    //built in react function that runs every time a parent class state changes\r\n    componentWillMount(){\r\n        this.updateWallet();\r\n    }\r\n\r\n    //updates the total wallet or spendable amount to be shown\r\n    updateWallet(){\r\n        this.setState(\r\n            {wallet: Math.round(100 * (100 - this.props.current_savings_percent) / 100 * this.props.total_wallet_amount) / 100}\r\n        )\r\n    }\r\n\r\n    //Updates the plus and minus sign on the home page\r\n    updateWalletSign = () => {\r\n        if(this.state.wallet <= 0){\r\n            this.setState({wallet_sign: '-'});\r\n        }else{\r\n            this.setState({wallet_sign: '+'});\r\n        }\r\n    }\r\n\r\n    //Routes to the transaction page\r\n    routeToTransaction = () => {\r\n        console.log(\"Will Route To Management Page\");\r\n        this.setState({redirect: true})\r\n    }\r\n\r\n    //Routes to the management page\r\n    routeToManagement = () => {\r\n        this.setState({routeToManagement: true})\r\n    }\r\n\r\n    render(){\r\n        // Proper calls for routing purposes\r\n        if (this.state.redirect) {\r\n            return <Redirect push to=\"/t\" />;\r\n          }\r\n        if (this.state.routeToManagement) {\r\n            return <Redirect push to=\"/mp\" />;\r\n        }\r\n        \r\n        //return function to render the components\r\n        return(\r\n        <div className = \"page\">\r\n            <span className = \"Menu\" onClick = {this.routeToManagement}>≡</span>\r\n            <span className = \"Head\">budge.\r\n                <span className=\"green\">i</span>\r\n                <span className='red'>t</span>\r\n            </span>\r\n            <div className = \"Value\">{this.state.wallet_sign}${this.state.wallet}</div>\r\n            <div className = \"Footer\" onClick = {this.routeToTransaction}>▼</div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n","export class TransactionItem{\r\n    constructor(_amount, _title, _spontaneous, _id){\r\n\r\n        this.state = ({\r\n            amount: _amount,\r\n            title: _title,\r\n            spontaneous: _spontaneous,\r\n            id: _id,\r\n        });\r\n    }\r\n    \r\n    getAmount(){\r\n        return this.state.amount;\r\n    }\r\n\r\n    getTitle(){\r\n        return this.state.title;\r\n    }\r\n\r\n    getSpontaneous(){\r\n        return this.state.spontaneous;\r\n    }\r\n};","import React, {Component} from 'react';\r\nimport './Global.css'\r\nimport './TransactionPage.css';\r\nimport {TransactionItem} from './TransactionTracking';\r\nimport { Redirect } from \"react-router\";\r\nimport swal from 'sweetalert2'\r\n\r\nexport class TransactionPage extends Component {\r\n    constructor() {\r\n        super();\r\n        //proper member variables\r\n        this.state = ({\r\n            value: 0, \r\n            positive: false, \r\n            name: \"Transaction\", \r\n            spontaneous: true,\r\n            route_management: false,\r\n            wallet: 0,\r\n            posState: \"\",\r\n            negState: \"active\",\r\n            spontState: \"active\",\r\n            regState: \"\"\r\n        });\r\n        //bind function for state setting\r\n        this.updateWallet = this.updateWallet.bind(this);\r\n    }\r\n\r\n    //built in function to run when the parent state changes\r\n    componentWillMount(){\r\n        this.updateWallet();\r\n    }\r\n\r\n    //updates the spendable amount from the homepage\r\n    updateWallet(){\r\n        this.setState({\r\n            wallet: ( (100-this.props.current_savings_percent)/100 * this.props.total_wallet_amount)\r\n        });\r\n    }\r\n\r\n    //FOR ALL BELOW FUNCTIONS\r\n    //These functions get run every time you press a button to simply set member variables\r\n    //No further commenting is needed\r\n\r\n    signChange = (e) => {\r\n        if(e.target.value == \"positive\"){\r\n            this.setState({\r\n                positive: true,\r\n                posState: \"active\",\r\n                negState: \"\"\r\n            });\r\n        }\r\n        else{\r\n            this.setState({\r\n                positive: false,\r\n                posState: \"\",\r\n                negState: \"active\"\r\n            });\r\n        }\r\n    }\r\n\r\n    regularityChange = (e) =>{\r\n        if(e.target.value == \"spontaneous\"){\r\n            this.setState({\r\n                spontaneous: true,\r\n                spontState: \"active\",\r\n                regState: \"\"\r\n            });\r\n        }\r\n        else{\r\n            this.setState({\r\n                spontaneous: false,\r\n                spontState: \"\",\r\n                regState: \"active\"\r\n            });\r\n        }\r\n    }\r\n\r\n    setValue = (e) => {\r\n        this.setState({value: e.target.value});\r\n    }\r\n\r\n    setName = (e) => {\r\n        this.setState({name: e.target.value});\r\n    }\r\n\r\n    //Send the transaction to the parent class\r\n    sendTransaction = () => {   \r\n        var temp = 0;\r\n        if(this.state.positive){\r\n            temp = this.state.value;\r\n        }else{\r\n            temp = -1 *  this.state.value;\r\n        }\r\n        this.props.receiveTransaction(new TransactionItem(temp, this.state.name, this.state.spontaneous, 0));\r\n    }\r\n\r\n    //manage routing as well as empty wallet checks to make sure you don't spend over your alotted limit\r\n    routeManagement = () => {\r\n        if (!this.state.positive && this.state.wallet < this.state.value){\r\n            swal({\r\n                title: \"Warning!\",\r\n                text: \"You've used up all the money in your wallet.\\nThis purchase will take money from your savings.\",\r\n                type: 'warning',\r\n                confirmButtonText: \"Confirm\"\r\n            })\r\n        }\r\n        this.sendTransaction();\r\n        this.setState({route_Management: true});\r\n    }\r\n\r\n    render() {\r\n        //routing applied if you want to switch pages\r\n        if (this.state.route_Management) {\r\n            return <Redirect push to=\"/mp\" />;\r\n        }\r\n        return (\r\n            <div className=\"page\">\r\n                <div id=\"header\">\r\n                    Transaction\r\n                </div>\r\n                <div className=\"form-group transaction\">\r\n                    <div className=\"row form-row name\">\r\n                        <div className=\"transaction-item\">\r\n                        <span className=\"input-group input-group-lg\">\r\n                            {/* input for the transaction name */}\r\n                            <input \r\n                                onChange = {this.setName} \r\n                                type = \"text\" \r\n                                className=\"form-control\"\r\n                                placeholder = \"Transaction\"\r\n                                aria-label=\"Transaction Name\"/>\r\n                        </span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row form-row money\">\r\n                        <div className=\"transaction-item\">\r\n                            <span className=\"input-group\">\r\n                                <span className=\"input-group-prepend\">\r\n                                    <span className=\"input-group-text\">$</span>\r\n                                </span>\r\n                                <input \r\n                                    onChange = {this.setValue} \r\n                                    type=\"number\" \r\n                                    className=\"form-control\"\r\n                                    aria-label=\"Amount (to the nearest dollar)\" \r\n                                    min=\"0\"\r\n                                    value={this.state.value}/>\r\n                                <span className=\"input-group-append\">\r\n                                    <span className=\"input-group-text\">.00</span>\r\n                                </span>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row form-row regularity\">\r\n                        <div className=\"transaction-item\">\r\n                            {/* Input buttons for + and - signs */}\r\n                            <span className=\"btn-group btn-group-toggle\" id=\"sign\" data-toggle=\"buttons\">\r\n                                <button type='radio' \r\n                                    className={\"btn btn-green \" + this.state.posState}\r\n                                    value=\"positive\" \r\n                                    checked={this.state.positive} \r\n                                    onClick={this.signChange}>\r\n                                    +\r\n                                </button>\r\n\r\n                                <button type='radio' \r\n                                    className={\"btn btn-red \" + this.state.negState}\r\n                                    value=\"negative\" \r\n                                    checked={!this.state.positive} \r\n                                    onClick={this.signChange}>\r\n                                    -\r\n                                </button>\r\n                            </span>\r\n                            {/* Input buttons for spontaneous vs regular */}\r\n                            <span className=\"btn-group btn-group-toggle\" id=\"reg\" data-toggle=\"buttons\">\r\n                                <button type='radio' \r\n                                    className={\"btn btn-blue \" + this.state.spontState}\r\n                                    value=\"spontaneous\" \r\n                                    checked={this.state.spontaneous} \r\n                                    onClick={this.regularityChange}>\r\n                                    Spontaneous\r\n                                </button>\r\n\r\n                                <button type='radio' \r\n                                    className={\"btn btn-blue \" + this.state.regState}\r\n                                    value=\"regular\" \r\n                                    checked={!this.state.spontaneous} \r\n                                    onClick={this.regularityChange}>\r\n                                    Regular\r\n                                </button>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row form-row confirm\">\r\n                        <div className=\"transaction-item\">\r\n                            <button type=\"button\" className=\"btn btn-blue btn-lg\" onClick = {this.routeManagement}>\r\n                                Confirm\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div> \r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport {ManagementPage} from './components/ManagementPage';\r\nimport {HomePage} from './components/HomePage';\r\nimport {TransactionPage} from './components/TransactionPage'\r\nimport { TransactionItem } from './components/TransactionTracking';\r\n\r\nimport './App.css';\r\n//App is the parent class that acts as the pipeline to send information to and from the necessary components\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    //member variables\r\n    this.state = ({\r\n      total_from_managment: 15000,\r\n      percentage_from_managment: 0,\r\n      transaction: [],\r\n    });\r\n    //bind functions so they can set the state\r\n    this.receiveTotal = this.receiveTotal.bind(this);\r\n    this.receivePercentage = this.receivePercentage.bind(this);\r\n    this.receiveTransaction = this.receiveTransaction.bind(this);\r\n  }\r\n  //built in function to save all pertinent info into local storage\r\n  componentWillMount(){\r\n    if(JSON.parse(localStorage.getItem(\"ls\")) != null){\r\n      var simplify = JSON.parse(localStorage.getItem(\"ls\"));\r\n      var tempStorage = []\r\n      for(var i = 0; i < simplify.length; i++){\r\n        var wrap = (simplify[i].state);\r\n        tempStorage.push(new TransactionItem(wrap.amount, wrap.title, wrap.spontaneous, wrap.id));\r\n      }\r\n      this.setState({transaction: tempStorage});\r\n    }\r\n  }\r\n  \r\n  //Recive the total wallet amount from management so it can then be passed to home page and transaction page\r\n  receiveTotal(total){\r\n    this.setState({total_from_managment: total})\r\n  }\r\n\r\n  //receive the total percentage from management so it can then be passed to home page and trasaction page\r\n  receivePercentage(percentage){\r\n    this.setState({percentage_from_managment: percentage})\r\n  }\r\n\r\n  //Function that is called from the child class to recieve the transaction so the global list gets updated that other classes are observing\r\n  receiveTransaction(transaction1){\r\n    var temp = this.state.transaction;\r\n    temp.push(transaction1);\r\n    \r\n    this.setState({transaction: temp});\r\n\r\n    localStorage.setItem(\"ls\", JSON.stringify(this.state.transaction)); \r\n  }\r\n\r\n  //resets the purchase history in local storage if needed as well as throughout every other child component\r\n  resetPurchaseHistory(){\r\n    localStorage.setItem(\"ls\",null);\r\n    this.setState({transaction: []});\r\n  }\r\n\r\n  render() {\r\n    //Adds the ability to route to the different compnent pages\r\n    return (\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path = \"/\" \r\n            render = {(props) => <HomePage \r\n              total_wallet_amount = {this.state.total_from_managment} \r\n              current_savings_percent = {this.state.percentage_from_managment}/>}\r\n          />\r\n\r\n          <Route path = \"/mp\" \r\n            render = {(props) => <ManagementPage \r\n              receiveTotal = {this.receiveTotal} \r\n              receivePercentage = {this.receivePercentage}\r\n              transactions = {this.state.transaction}\r\n              clearPurchaseHistory = {this.resetPurchaseHistory}\r\n              />}\r\n\r\n            />\r\n\r\n          <Route path = \"/t\"\r\n            render = {(props) => <TransactionPage\r\n            receiveTransaction = {this.receiveTransaction}\r\n            current_savings_percent = {this.state.percentage_from_managment}\r\n            total_wallet_amount = {this.state.total_from_managment}/>}\r\n            />\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\n//initial class that gets the root dom and renders the App component within it\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}